# This workflow will upload a Python Package using Twine when a release is created
# For more information see: https://help.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions#publishing-to-package-registries

name: build
on: [ push, pull_request ]

jobs:
  test-action:
    name: Test action
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: https://code.forgejo.org/actions/checkout@v5

      - name: Get Changelog Information
        uses: ./
        id: yaclog-show
        with:
          changelog-path: 'tests/Test-Changelog.md'

      - name: Get Changelog Information (Unreleased)
        uses: ./
        id: yaclog-show-unreleased
        with:
          changelog-path: 'tests/Test-Changelog-Unreleased.md'

      - name: Copy Body File
        run:
          cp ${{ steps.yaclog-show.outputs.body-file }} body.md

      - name: Fail
        if: >
          !(
          steps.yaclog-show.outputs.name == '0.13.0 "Aquarius"' &&
          steps.yaclog-show.outputs.header == '## 0.13.0 "Aquarius" - 1970-04-11 [YANKED]' &&
          steps.yaclog-show.outputs.version == '0.13.0' &&
          steps.yaclog-show-unreleased.outputs.version == '0.13.1' &&
          endsWith(steps.yaclog-show.outputs.changelog, 'tests/Test-Changelog.md') &&
          hashFiles('body.md') == 'ad49b5c946b7d361db1c3dacc73de4f6222cca6272aab426786de168eede702b'
          )
        run: |
          echo "Action self-test failed!"
          echo "yaclog-show:\n ${{ toJSON(steps.yaclog-show.outputs) }}"
          echo "yaclog-show-unreleased:\n${{ toJSON(steps.yaclog-show.outputs) }}"
          echo "${{ hashFiles('body.md') }}"
          false

  test:
    name: Test on Python ${{ matrix.python-version }}
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        python-version: [ "3.10", "3.11", "3.12", "3.13", "3.14" ]
    env:
      UV_LINK_MODE: copy

    steps:
      - name: Checkout
        uses: https://code.forgejo.org/actions/checkout@v5

      - name: Set up Python
        uses: https://code.forgejo.org/actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}

      - name: Setup uv
        shell: bash
        run: | 
          if ! command -v uv >/dev/null 2>&1; then
            curl -LsSf https://astral.sh/uv/install.sh | sh
          else
            echo "uv already installed"
          fi
        env:
          UV_UNMANAGED_INSTALL: /usr/local/bin

      - name: Lint with ruff
        run: |
          # stop the build if there are Python syntax errors or undefined names
          uvx ruff check --select=E9,F63,F7,F82
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          uvx ruff check --exit-zero

      - name: Run unit tests
        run: |
          uv venv
          uv pip install .[test]
          uv run -m pytest --verbose

  publish:
    name: Build and Publish
    needs:
      - test
      - test-action
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: https://code.forgejo.org/actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Get Changelog Information
        id: yaclog-show
        uses: ./ # self-hosting!

      - name: Setup uv
        shell: bash
        run: |
          if ! command -v uv >/dev/null 2>&1; then
            curl -LsSf https://astral.sh/uv/install.sh | sh
          else
            echo "uv already installed"
          fi
        env:
          UV_UNMANAGED_INSTALL: /usr/local/bin

      - name: Setup tea
        shell: bash
        run: |
          set -u
          if ! command tea 2>/dev/null; then
            TEA_BIN=/usr/local/bin/tea
            TEA_VERSION=0.11.0
            case $RUNNER_ARCH in
              ARM64)
                ARCH=arm64
              ;;
              X64)
                ARCH=amd64
              ;;
            esac
            curl -sL https://dl.gitea.io/tea/$TEA_VERSION/tea-$TEA_VERSION-linux-$ARCH -o $TEA_BIN
            chmod +x $TEA_BIN
          fi
          tea login add --url ${{ forge.server_url }} --token ${{ secrets.FORGEJO_TOKEN }}

      - name: Build
        run: uv build

      - uses: https://code.forgejo.org/forgejo/upload-artifact@v4
        with:
          name: python-distribution.zip
          path: dist/
          compression-level: 0 # already compressed

      - name: Create release
        if: forge.event_name == 'push' && startsWith(forge.ref, 'refs/tags')
        run: >
          tea release create 
          --repo "${{ forge.repository }}"
          --title "${{ steps.yaclog-show.outputs.name }}"
          --note-file "${{ steps.yaclog-show.outputs.body-file }}"
          "${{ forge.ref_name }}"

      - name: Upload artifacts to release
        if: forge.event_name == 'push' && startsWith(forge.ref, 'refs/tags')
        run: >
          tea release assets create 
          --repo "${{ forge.repository }}"
          "${{ forge.ref_name }}" dist/*

      - name: Upload to PyPI
        run: uv publish ${{ !(forge.event_name == 'push' && startsWith(forge.ref, 'refs/tags')) && '--dry-run' || ''}}
        env:
          UV_PUBLISH_TOKEN: ${{ secrets.PYPI_TOKEN }}

      - name: Upload to Forgejo
        run: uv publish ${{ !(forge.event_name == 'push' && startsWith(forge.ref, 'refs/tags')) && '--dry-run' || ''}}
        env:
          UV_PUBLISH_USERNAME: ${{ forge.repository_owner }}
          UV_PUBLISH_PASSWORD: ${{ secrets.FORGEJO_TOKEN }}
          UV_PUBLISH_URL: ${{ forge.server_url }}/api/packages/${{ forge.repository_owner }}/pypi
          UV_PUBLISH_CHECK_URL: ${{ forge.server_url }}/api/packages/${{ forge.repository_owner }}/pypi